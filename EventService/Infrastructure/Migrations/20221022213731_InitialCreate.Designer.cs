// <auto-generated />
using System;
using EventService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventService.Infrastructure.Migrations
{
    [DbContext(typeof(EventsContext))]
    [Migration("20221022213731_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EventService.Domain.ConferenceSubscriptions.ConferenceSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("_expirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpirationDate");

                    b.HasKey("Id");

                    b.ToTable("ConferenceSubscriptions", "events");
                });

            modelBuilder.Entity("EventService.Domain.EventReviews.EventReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_authorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuthorId");

                    b.Property<DateTime>("_createDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<DateTime?>("_editDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EditDate");

                    b.Property<Guid>("_eventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventId");

                    b.Property<Guid?>("_inReplyToReviewId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InReplyToReviewId");

                    b.Property<bool>("_isRemoved")
                        .HasColumnType("bit")
                        .HasColumnName("IsRemoved");

                    b.Property<string>("_removedByReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemovedByReason");

                    b.Property<string>("_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Text");

                    b.HasKey("Id");

                    b.ToTable("EventReviews", "events");
                });

            modelBuilder.Entity("EventService.Domain.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("_cancelDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CancelDate");

                    b.Property<Guid?>("_cancelMemberId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CancelMemberId");

                    b.Property<DateTime?>("_changeDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ChangeDate");

                    b.Property<Guid?>("_changeMemberId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ChangeMemberId");

                    b.Property<DateTime>("_createDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<Guid>("_creatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<Guid>("_exhibitionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExhibitionId");

                    b.Property<bool>("_isCanceled")
                        .HasColumnType("bit")
                        .HasColumnName("IsCanceled");

                    b.HasKey("Id");

                    b.ToTable("Events", "events");
                });

            modelBuilder.Entity("EventService.Domain.ExhibitionProposals.ExhibitionProposal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("_proposalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ProposalDate");

                    b.Property<Guid>("_proposalUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProposalUserId");

                    b.HasKey("Id");

                    b.ToTable("ExhibitionProposals", "events");
                });

            modelBuilder.Entity("EventService.Domain.Exhibitions.Exhibition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("_createDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("_paymentDateTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("PaymentDateTo");

                    b.HasKey("Id");

                    b.ToTable("Exhibitions", "events");
                });

            modelBuilder.Entity("EventService.Domain.Members.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email1");

                    b.Property<string>("_email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("_firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("_lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("_login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Login");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Members", "events");
                });

            modelBuilder.Entity("EventService.Domain.Events.Event", b =>
                {
                    b.OwnsOne("EventService.Domain.Events.Money", "_eventFee", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EventFeeCurrency");

                            b1.Property<decimal?>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("EventFeeValue");

                            b1.HasKey("EventId");

                            b1.ToTable("Events", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.OwnsOne("EventService.Domain.Events.EventLimits", "_eventLimits", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("ParticipantsLimit")
                                .HasColumnType("int")
                                .HasColumnName("ParticipantsLimit");

                            b1.HasKey("EventId");

                            b1.ToTable("Events", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.OwnsMany("EventService.Domain.Events.EventParticipant", "_participants", b1 =>
                        {
                            b1.Property<Guid>("ParticipantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("_decisionDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("DecisionDate");

                            b1.Property<DateTime?>("_decisionChangeDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("DecisionChangeDate");

                            b1.Property<bool>("_decisionChanged")
                                .HasColumnType("bit")
                                .HasColumnName("DecisionChanged");

                            b1.Property<bool>("_isFeePaid")
                                .HasColumnType("bit")
                                .HasColumnName("IsFeePaid");

                            b1.Property<bool>("_isRemoved")
                                .HasColumnType("bit")
                                .HasColumnName("IsRemoved");

                            b1.Property<DateTime?>("_removedDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("RemovedDate");

                            b1.Property<Guid?>("_removingMemberId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RemovingMemberId");

                            b1.Property<string>("_removingReason")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RemovingReason");

                            b1.HasKey("ParticipantId", "EventId", "_decisionDate");

                            b1.HasIndex("EventId");

                            b1.ToTable("EventParticipants", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");

                            b1.OwnsOne("EventService.Domain.Events.Money", "_fee", b2 =>
                                {
                                    b2.Property<Guid>("EventParticipantParticipantId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("EventParticipantEventId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTime>("EventParticipant_decisionDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("Currency")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("FeeCurrency");

                                    b2.Property<decimal?>("Value")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("FeeValue");

                                    b2.HasKey("EventParticipantParticipantId", "EventParticipantEventId", "EventParticipant_decisionDate");

                                    b2.ToTable("EventParticipants", "events");

                                    b2.WithOwner()
                                        .HasForeignKey("EventParticipantParticipantId", "EventParticipantEventId", "EventParticipant_decisionDate");
                                });

                            b1.OwnsOne("EventService.Domain.Events.EventParticipantRole", "_role", b2 =>
                                {
                                    b2.Property<Guid>("EventParticipantParticipantId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("EventParticipantEventId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTime>("EventParticipant_decisionDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("RoleCode");

                                    b2.HasKey("EventParticipantParticipantId", "EventParticipantEventId", "EventParticipant_decisionDate");

                                    b2.ToTable("EventParticipants", "events");

                                    b2.WithOwner()
                                        .HasForeignKey("EventParticipantParticipantId", "EventParticipantEventId", "EventParticipant_decisionDate");
                                });

                            b1.Navigation("_fee");

                            b1.Navigation("_role");
                        });

                    b.OwnsOne("EventService.Domain.Events.EventTime", "Time", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("TermEndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("TermStartDate");

                            b1.HasKey("EventId");

                            b1.ToTable("Events", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.OwnsMany("EventService.Domain.Events.EventWaiteListMember", "_waitlistMembers", b1 =>
                        {
                            b1.Property<Guid>("MemberId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("SignUpDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("SignUpDate");

                            b1.Property<bool>("_isMovedToParticipants")
                                .HasColumnType("bit")
                                .HasColumnName("IsMovedToParticipants");

                            b1.Property<bool>("_isSignedOff")
                                .HasColumnType("bit")
                                .HasColumnName("IsSignedOff");

                            b1.Property<DateTime?>("_movedToParticipantsDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("MovedToParticipantsDate");

                            b1.Property<DateTime?>("_signOffDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("SignOffDate");

                            b1.HasKey("MemberId", "EventId", "SignUpDate");

                            b1.HasIndex("EventId");

                            b1.ToTable("EventWaitlistMembers", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.OwnsOne("EventService.Domain.Events.RsvpTime", "_rsvpTime", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("RSVPTermEndDate");

                            b1.Property<DateTime?>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("RSVPTermStartDate");

                            b1.HasKey("EventId");

                            b1.ToTable("Events", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("Time")
                        .IsRequired();

                    b.Navigation("_eventFee");

                    b.Navigation("_eventLimits");

                    b.Navigation("_participants");

                    b.Navigation("_rsvpTime");

                    b.Navigation("_waitlistMembers");
                });

            modelBuilder.Entity("EventService.Domain.ExhibitionProposals.ExhibitionProposal", b =>
                {
                    b.OwnsOne("EventService.Domain.ExhibitionProposals.ExhibitionProposalStatus", "_status", b1 =>
                        {
                            b1.Property<Guid>("ExhibitionProposalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("StatusCode");

                            b1.HasKey("ExhibitionProposalId");

                            b1.ToTable("ExhibitionProposals", "events");

                            b1.WithOwner()
                                .HasForeignKey("ExhibitionProposalId");
                        });

                    b.Navigation("_status");
                });

            modelBuilder.Entity("EventService.Domain.Exhibitions.Exhibition", b =>
                {
                    b.OwnsMany("EventService.Domain.Exhibitions.ExhibitionMember", "_members", b1 =>
                        {
                            b1.Property<Guid>("MemberId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ExhibitionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("JoinedDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("JoinedDate");

                            b1.Property<bool>("_isActive")
                                .HasColumnType("bit")
                                .HasColumnName("IsActive");

                            b1.Property<DateTime?>("_leaveDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("LeaveDate");

                            b1.HasKey("MemberId", "ExhibitionId", "JoinedDate");

                            b1.HasIndex("ExhibitionId");

                            b1.ToTable("ExhibitionMembers", "events");

                            b1.WithOwner()
                                .HasForeignKey("ExhibitionId");

                            b1.OwnsOne("EventService.Domain.Exhibitions.ExhibitionMemberRole", "_role", b2 =>
                                {
                                    b2.Property<Guid>("ExhibitionMemberMemberId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("ExhibitionMemberExhibitionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTime>("ExhibitionMemberJoinedDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("RoleCode");

                                    b2.HasKey("ExhibitionMemberMemberId", "ExhibitionMemberExhibitionId", "ExhibitionMemberJoinedDate");

                                    b2.ToTable("ExhibitionMembers", "events");

                                    b2.WithOwner()
                                        .HasForeignKey("ExhibitionMemberMemberId", "ExhibitionMemberExhibitionId", "ExhibitionMemberJoinedDate");
                                });

                            b1.Navigation("_role");
                        });

                    b.Navigation("_members");
                });
#pragma warning restore 612, 618
        }
    }
}
